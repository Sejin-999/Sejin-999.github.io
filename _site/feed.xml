

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Sejin의 개발공부</title>
  <subtitle>hi , i'm sejin</subtitle>
  <updated>2024-03-23T14:53:15+09:00</updated>
  <author>
    <name>Yang Se Jin</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Yang Se Jin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>test 해보기</title>
    <link href="http://localhost:4000/posts/testPage/" rel="alternate" type="text/html" title="test 해보기" />
    <published>2024-03-18T06:44:00+09:00</published>
  
    <updated>2024-03-18T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/testPage/</id>
    <content src="http://localhost:4000/posts/testPage/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="Blog" />
    
  

  
    <summary>
      





      목차


  링크
  목록
  코드 블록
  인용문
  이미지


링크

구글에 가보세요.

목록


  항목 1
  항목 2
    
      하위 항목 1
      하위 항목 2
    
  


코드 블록

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}


인용문


  인용문입니다. 이것은 어떤 작가나 발언자의 말을 인용할 때 사용됩니다.


이미지



    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - 스레드</title>
    <link href="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%8A%A4%EB%A0%88%EB%93%9C/" rel="alternate" type="text/html" title="자바에 대하여 - 스레드" />
    <published>2024-01-08T06:44:00+09:00</published>
  
    <updated>2024-01-08T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%8A%A4%EB%A0%88%EB%93%9C/</id>
    <content src="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%8A%A4%EB%A0%88%EB%93%9C/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      5.JAVA-스레드

들어가며

이번 포스트에서는 스레드에 대한 포스트 입니다.

사실 한번쯤은 모두 공부해본 내용이지만 , 정리도하고 java에서는 어떻게 활용할 수 있는지에 대한 이야기도 함께 하겠습니다.

스레드?

프로세스 내에서 실행되는 독립적인 작업 단위이며 여러 스레드가 하나의 프로세스에서 동작할 수 있습니다.

그리고 스레드는 자체적인 흐름제어,스택,레지스터를 가지고 있습니다.

사용하는 가장 큰 이유는 여러 작업을 동시에 수행하여 효율성을 높이기 위해 사용합니다.

자바에서 스레드 쓰기


  Thread 클래스 상속: Thread 클래스를 상속받고 run() 메서드를 오버라이딩하여 스레드의 실행 코드를 구현합니다.
  Runnable 인터페이스 구현: Runnable 인터페이스를 구현...
    </summary>
  

  </entry>

  
  <entry>
    <title>알고리즘 - search - dfs&amp;bfs</title>
    <link href="http://localhost:4000/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-search/" rel="alternate" type="text/html" title="알고리즘 - search - dfs&amp;amp;bfs" />
    <published>2024-01-07T06:44:00+09:00</published>
  
    <updated>2024-01-07T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-search/</id>
    <content src="http://localhost:4000/posts/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-search/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="algorithm" />
    
  

  
    <summary>
      





      문제는 자바를 이용해 풀어보겠습니다!

들어가며

이번 포스트에서는 탐색 기법에 대한 이야기를 해보려고 합니다.

알고리즘은 공부를 하면 할 수록 더욱 깊고 , 다양한 조합을 만들 수 있기 때문에 기본적이며 핵심적인 이야기들을 위주로 공부해본 내용을 정리하겠습니다.

DFS - 깊이 우선 탐색

DFS : depth first search 는 완전 탐색 기법 중 하나 입니다.

완전 탐색 기법 (Exhaustive Search) 은 모든 경우의 수를 탐색해 해를 찾는 기법입니다.

특징은 일관되고 , 간단하고 직관적입니다.

당연히 모든 경우의 수를 탐색하는 만큼 경우의 수가 많아질 수 록 효율이 낮아집니다.


  
    
      기능
      특징
      시간 복잡도
    
  
  
...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA에 대하여 - 메모리 &amp; 가비지 컬렉션</title>
    <link href="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%A9%94%EB%AA%A8%EB%A6%AC/" rel="alternate" type="text/html" title="JAVA에 대하여 - 메모리 &amp;amp; 가비지 컬렉션" />
    <published>2024-01-06T06:44:00+09:00</published>
  
    <updated>2024-01-06T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%A9%94%EB%AA%A8%EB%A6%AC/</id>
    <content src="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%A9%94%EB%AA%A8%EB%A6%AC/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트에서는 Java가 메모리를 어떤식으로 활용하는지에 대한 이야기를 정리해보려고 합니다.

자세하게 생각하면 끝도 없는 영역이기 때문에 아 이런식으로 동작하는 구나 정도의 수준의 정리 내용입니다.

언어들은 메모리를 어떻게 쓸가?

Java와 같이 컴파일러를 통해 기계어를 만들어 사용하는 언어들은 아래 그림처럼

코드를 실행하는 영역과 데이터를 저장하는 영역으로 나누어 메모리를 할당해 사용합니다.

자바의 경우에 데이터를 저장하는 방법은 크게 3가지로 나누어 이야기할 수 있습니다.



Java가 최초 저장할때는 해당영역을 사용합니다.

더 정확히 구분하면

Method Area 와 Static Area로 나눌 수 있습니다.

Method Area vs Static Area?

메서드...
    </summary>
  

  </entry>

  
  <entry>
    <title>JAVA에 대하여 - 동작</title>
    <link href="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%8F%99%EC%9E%91/" rel="alternate" type="text/html" title="JAVA에 대하여 - 동작" />
    <published>2024-01-05T06:44:00+09:00</published>
  
    <updated>2024-01-05T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%8F%99%EC%9E%91/</id>
    <content src="http://localhost:4000/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EB%8F%99%EC%9E%91/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트 에서는 자바가 동작하는 구동 과정의 대해 정리해 보려고 합니다. 자바가 매력적인 이유 중 하나인 구동 과정에 대한 이야기는 매우 흥미롭습니다.

자바는 어떻게 보여지나



제가 정리하면 이미지를 보시면 크게 3가지의 소프트웨어를 통해 동작한다는 것을 볼 수 있습니다.

JDK = 개발도구 , JRE = JVM용 OS , JVM = 자바 전용 가상 컴퓨터

이전 포스트에서 자바가 나온 이유에 대해 설명하며 다양한 플렛폼에서 사용이 가능하다는 의미가 바로 이런식으로 동작하기 때문에 가능합니다.

이런 특성을 Write once Run Anywhere 이라고 하는데 한국어로 “한번 쓰면 계속 쓸 수 있음” 입니다.

JVM의 특징을 정리해보면 다음 과 같습니다.


  플랫폼 독립성...
    </summary>
  

  </entry>

</feed>



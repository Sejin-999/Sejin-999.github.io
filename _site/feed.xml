

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Sejin의 개발공부</title>
  <subtitle>hi , i'm sejin</subtitle>
  <updated>2024-05-08T15:04:51+09:00</updated>
  <author>
    <name>Yang Se Jin</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Yang Se Jin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>test 해보기</title>
    <link href="http://localhost:4000/posts/testPage/" rel="alternate" type="text/html" title="test 해보기" />
    <published>2024-03-18T06:44:00+09:00</published>
  
    <updated>2024-03-18T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/testPage/</id>
    <content src="http://localhost:4000/posts/testPage/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="Blog" />
    
  

  
    <summary>
      





      목차


  링크
  목록
  코드 블록
  인용문
  이미지


링크

구글에 가보세요.

목록


  항목 1
  항목 2
    
      하위 항목 1
      하위 항목 2
    
  


코드 블록

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}


인용문


  인용문입니다. 이것은 어떤 작가나 발언자의 말을 인용할 때 사용됩니다.


이미지



    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - Hash에 대하여</title>
    <link href="http://localhost:4000/posts/Java-Hash/" rel="alternate" type="text/html" title="자바에 대하여 - Hash에 대하여" />
    <published>2024-01-31T06:44:00+09:00</published>
  
    <updated>2024-05-02T17:42:40+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Hash/</id>
    <content src="http://localhost:4000/posts/Java-Hash/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트 에서는 Hash에 대하여 공부해볼 것입니다.

Hash?

고정된 크기로 값을 바꾸는 함수 or 알고리즘

java에서 hash

키와 값의 쌍을 저장하는 데이터 구조입니다.

키는 고유한 식별자이며 값은 키와 연관된 데이터입니다.

해시 테이블이라고도 불리는 해시 구조는 데이터 검색 및 삽입 속도가 매우 빠르다는 장점이 있습니다.

어떤 키값을 통해 해시함수로 고정된 크기의 해시 값을 만들고 이 값으로 배열의 인덱스 , 위치 , 데이터 값을 저장하거나 검색할 때 활용합니다.

해시 코드는 고정된 길이의 정수 값이며, 일반적으로 키의 일부 비트를 추출하거나 키를 제곱한 후 일부 비트를 추출하는 방식으로 계산됩니다.

해쉬함수

임의의 데이터를 고정된 길이의 값으로 리턴해주는 함수...
    </summary>
  

  </entry>

  
  <entry>
    <title>Spring - DI 에 대하여 간단 이해</title>
    <link href="http://localhost:4000/posts/Spring-DI/" rel="alternate" type="text/html" title="Spring - DI 에 대하여 간단 이해" />
    <published>2024-01-30T06:44:00+09:00</published>
  
    <updated>2024-01-30T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Spring-DI/</id>
    <content src="http://localhost:4000/posts/Spring-DI/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="spring" />
    
  

  
    <summary>
      





      들어가며

이번포스트에서는 DI - Dependency Injection 에 대해서 알아보겠습니다.

DI 는 의존성 주입으로 객체를 만들 때 객체를 통해 객체를 생성하는 것이아닌

외부에서 객체를 생성해 사용한다는 개념에서 부터 시작합니다.

객체를 사용하는 방법



결국 차이점은 내부에서 만들어 하냐 - 외부에서 만들어서 주입을 받느냐의 차이점입니다.

중요한 점은 왼쪽과 같이 만들게 된다면 A 는 B 와 C 의 기능의 종속되게 되고,

이러면 개발자가 해당 하는 객체에 라이프 사이클을 모두 신경써서 개발 해야합니다.

만약 A에서 B , C 가 문제가 생기거나 수정 사항이 생기면 이를 제어하기 위해 A 객체 자체가 정상적으로 작동하지 않을 것입니다.

예를 들어 객체 A를 결제프로세스 전체 라고...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - String</title>
    <link href="http://localhost:4000/posts/Java-String-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" rel="alternate" type="text/html" title="자바에 대하여 - String" />
    <published>2024-01-28T06:44:00+09:00</published>
  
    <updated>2024-01-28T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-String-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/</id>
    <content src="http://localhost:4000/posts/Java-String-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트에서는 자바에서 String 에 대해 이해해 보려고합니다.

String은 기본적으로 제공되는 변수 - 원시타입들과는 다릅니다.

원시타입

기본적으로 제공 하는 변수형 들을 말합니다.

정수 : btye short int long - 1 , 2 , 4 , 8 바이트로 이루어져있습니다.

사용

저는  특별한 제약조건이 있는 경우가 아니라면  int 와 long을 사용하고 있습니다.

int의 경우 21억 정도 까지의 값들을 저장할 수 있는데 만약 저장 될 값이

20억이 넘어갈 것같은 경우에는 long으로 아닌 경우에는 int를 사용하고 있습니다.

실수 : float Double  - 4 ,8

문자 : char - 2

논리 : boolean - 1

이렇게 원시타입이 이루어...
    </summary>
  

  </entry>

  
  <entry>
    <title>CS - 동기화와 비동기화</title>
    <link href="http://localhost:4000/posts/CS-%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0%ED%99%94/" rel="alternate" type="text/html" title="CS - 동기화와 비동기화" />
    <published>2024-01-27T06:44:00+09:00</published>
  
    <updated>2024-01-27T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/CS-%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0%ED%99%94/</id>
    <content src="http://localhost:4000/posts/CS-%EB%8F%99%EA%B8%B0%ED%99%94%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0%ED%99%94/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="cs" />
    
  

  
    <summary>
      





      여러 프로세스/스레드를 동시에 실행해도 공유데이터의 일관성을 유지하는 것을 말한다.

동기화 (Synchronous)

한 작업이 완료될 때까지 다음 작업이 시작되지 않습니다.

예를 들어 줄을 서는 것과 동일합니다. A작업을 수행하고 이를 바탕으로 B작업을 할때 이를 동기방식 이라고 합니다.

프로세스, 스레드의 관점에서는 공유자원에 접근할 때 서로의 작업의 영향일 미치지 않으면서 공유하는 자원의 접근을 조절해 경쟁상태가 되지 않도록 하는 것을 말합니다.

장단점은 코드 이해가 좋고, 명확하게 제어하며 데이터 손상 위험이 적습니다. 반대로 처리 속도가 느려질 수 있고, 블로킹 현상이 발생해 작업이 중단 될 수 있습니다.

비동기화 (Asynchronous)

한 작업이 완료되기를 기다리지 않고 다른 ...
    </summary>
  

  </entry>

</feed>



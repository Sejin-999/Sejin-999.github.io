

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Sejin의 개발공부</title>
  <subtitle>hi , i'm sejin</subtitle>
  <updated>2024-05-12T18:47:42+09:00</updated>
  <author>
    <name>Yang Se Jin</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Yang Se Jin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>test 해보기</title>
    <link href="http://localhost:4000/posts/testPage/" rel="alternate" type="text/html" title="test 해보기" />
    <published>2024-03-18T06:44:00+09:00</published>
  
    <updated>2024-03-18T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/testPage/</id>
    <content src="http://localhost:4000/posts/testPage/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="Blog" />
    
  

  
    <summary>
      





      목차


  링크
  목록
  코드 블록
  인용문
  이미지


링크

구글에 가보세요.

목록


  항목 1
  항목 2
    
      하위 항목 1
      하위 항목 2
    
  


코드 블록

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, world!");
    }
}


인용문


  인용문입니다. 이것은 어떤 작가나 발언자의 말을 인용할 때 사용됩니다.


이미지



    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - OOP에서의 디자인패턴</title>
    <link href="http://localhost:4000/posts/Java-OOP-%EC%97%90%EC%84%9C%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/" rel="alternate" type="text/html" title="자바에 대하여 - OOP에서의 디자인패턴" />
    <published>2024-02-01T06:44:00+09:00</published>
  
    <updated>2024-02-01T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-OOP-%EC%97%90%EC%84%9C%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/</id>
    <content src="http://localhost:4000/posts/Java-OOP-%EC%97%90%EC%84%9C%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

디자인 패턴이란, 클래스들 간의 관계를 어떻게 잘 연결할 것인지에 대해 이야기하는 것입니다.

생성 패턴

이러한 패턴들은 기존 코드의 유연성과 재사용을 증가시키는 다양한 객체 생성 메커니즘들을 제공합니다.

구조 패턴

이러한 패턴들은 객체들과 클래스들을 구조를 유연하고 효율적으로 유지하면서 더 큰 구조로 조립하는 방법을 설명합니다.

행동 패턴

이러한 패턴들은 알고리즘들 및 객체 간의 책임 할당과 관련이 있습니다.

SingleTone

어떤 클래스가 최대 한 번의 인스턴스만을 갖도록 보장하는 패턴입니다. 이 패턴을 사용하면 특정 클래스의 인스턴스가 오직 하나만 존재하도록 제한할 수 있으므로, 리소스의 낭비를 방지하고 객체 간의 일관성을 유지할 수 있습니다.


  Private Con...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - Hash에 대하여</title>
    <link href="http://localhost:4000/posts/Java-Hash/" rel="alternate" type="text/html" title="자바에 대하여 - Hash에 대하여" />
    <published>2024-01-31T06:44:00+09:00</published>
  
    <updated>2024-05-02T17:42:40+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Hash/</id>
    <content src="http://localhost:4000/posts/Java-Hash/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트 에서는 Hash에 대하여 공부해볼 것입니다.

Hash?

고정된 크기로 값을 바꾸는 함수 or 알고리즘

java에서 hash

키와 값의 쌍을 저장하는 데이터 구조입니다.

키는 고유한 식별자이며 값은 키와 연관된 데이터입니다.

해시 테이블이라고도 불리는 해시 구조는 데이터 검색 및 삽입 속도가 매우 빠르다는 장점이 있습니다.

어떤 키값을 통해 해시함수로 고정된 크기의 해시 값을 만들고 이 값으로 배열의 인덱스 , 위치 , 데이터 값을 저장하거나 검색할 때 활용합니다.

해시 코드는 고정된 길이의 정수 값이며, 일반적으로 키의 일부 비트를 추출하거나 키를 제곱한 후 일부 비트를 추출하는 방식으로 계산됩니다.

해쉬함수

임의의 데이터를 고정된 길이의 값으로 리턴해주는 함수...
    </summary>
  

  </entry>

  
  <entry>
    <title>자바에 대하여 - Hash에 대하여</title>
    <link href="http://localhost:4000/posts/Java-Hash-test/" rel="alternate" type="text/html" title="자바에 대하여 - Hash에 대하여" />
    <published>2024-01-31T06:44:00+09:00</published>
  
    <updated>2024-01-31T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Java-Hash-test/</id>
    <content src="http://localhost:4000/posts/Java-Hash-test/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="java" />
    
  

  
    <summary>
      





      들어가며

이번 포스트 에서는 Hash에 대하여 공부해볼 것입니다.

Hash?

고정된 크기로 값을 바꾸는 함수 or 알고리즘

java에서 hash

키와 값의 쌍을 저장하는 데이터 구조입니다.

키는 고유한 식별자이며 값은 키와 연관된 데이터입니다.

해시 테이블이라고도 불리는 해시 구조는 데이터 검색 및 삽입 속도가 매우 빠르다는 장점이 있습니다.

어떤 키값을 통해 해시함수로 고정된 크기의 해시 값을 만들고 이 값으로 배열의 인덱스 , 위치 , 데이터 값을 저장하거나 검색할 때 활용합니다.

해시 코드는 고정된 길이의 정수 값이며, 일반적으로 키의 일부 비트를 추출하거나 키를 제곱한 후 일부 비트를 추출하는 방식으로 계산됩니다.

해쉬함수

임의의 데이터를 고정된 길이의 값으로 리턴해주는 함수...
    </summary>
  

  </entry>

  
  <entry>
    <title>Spring - DI 에 대하여 간단 이해</title>
    <link href="http://localhost:4000/posts/Spring-DI/" rel="alternate" type="text/html" title="Spring - DI 에 대하여 간단 이해" />
    <published>2024-01-30T06:44:00+09:00</published>
  
    <updated>2024-01-30T06:44:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Spring-DI/</id>
    <content src="http://localhost:4000/posts/Spring-DI/" />
    <author>
      <name>Yang Se Jin</name>
    </author>

  
    
    <category term="spring" />
    
  

  
    <summary>
      





      들어가며

이번포스트에서는 DI - Dependency Injection 에 대해서 알아보겠습니다.

DI 는 의존성 주입으로 객체를 만들 때 객체를 통해 객체를 생성하는 것이아닌

외부에서 객체를 생성해 사용한다는 개념에서 부터 시작합니다.

객체를 사용하는 방법



결국 차이점은 내부에서 만들어 하냐 - 외부에서 만들어서 주입을 받느냐의 차이점입니다.

중요한 점은 왼쪽과 같이 만들게 된다면 A 는 B 와 C 의 기능의 종속되게 되고,

이러면 개발자가 해당 하는 객체에 라이프 사이클을 모두 신경써서 개발 해야합니다.

만약 A에서 B , C 가 문제가 생기거나 수정 사항이 생기면 이를 제어하기 위해 A 객체 자체가 정상적으로 작동하지 않을 것입니다.

예를 들어 객체 A를 결제프로세스 전체 라고...
    </summary>
  

  </entry>

</feed>



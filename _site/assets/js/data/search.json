[
  
  {
    "title": "test 해보기",
    "url": "/posts/testPage/",
    "categories": "Blog",
    "tags": "Blog, jekyll, Github, Git",
    "date": "2024-03-18 06:44:00 +0900",
    





    
    "snippet": "목차  링크  목록  코드 블록  인용문  이미지링크구글에 가보세요.목록  항목 1  항목 2          하위 항목 1      하위 항목 2      코드 블록public class Main {    public static void main(String[] args) {        System.out.println(\"Hello, world!...",
    "content": "목차  링크  목록  코드 블록  인용문  이미지링크구글에 가보세요.목록  항목 1  항목 2          하위 항목 1      하위 항목 2      코드 블록public class Main {    public static void main(String[] args) {        System.out.println(\"Hello, world!\");    }}인용문  인용문입니다. 이것은 어떤 작가나 발언자의 말을 인용할 때 사용됩니다.이미지"
  },
  
  {
    "title": "JAVA에 대하여 - 서론",
    "url": "/posts/Git%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%84%A4%EC%A0%95/",
    "categories": "java",
    "tags": "java, OOP, 언어의 역사",
    "date": "2024-01-03 06:44:00 +0900",
    





    
    "snippet": "들어가며JAVA에 대해 공부하며 배운 것들을 정리하고 생각한 것들을 정리하는 포스트 입니다.개발자들이 많이 사용하는 언어가 궁금해 찾아보다 해당 사이트를 확인했습니다.https://www.tiobe.com/tiobe-index/Python , c 계열 , 자바 가 50 퍼센트 가량 비율을 차지하고 있습니다.특히, 대한민국에서는 정부 공식 프레임워크로 ...",
    "content": "들어가며JAVA에 대해 공부하며 배운 것들을 정리하고 생각한 것들을 정리하는 포스트 입니다.개발자들이 많이 사용하는 언어가 궁금해 찾아보다 해당 사이트를 확인했습니다.https://www.tiobe.com/tiobe-index/Python , c 계열 , 자바 가 50 퍼센트 가량 비율을 차지하고 있습니다.특히, 대한민국에서는 정부 공식 프레임워크로 Spring기반을 사용하기 때문에 비중도가 높습니다.Python 의 경우 웹개발자 뿐만 아니라 AI , IOT등 차세대 분야에서도 많이 사용되고 있고 , 처음 언어를 공부할 때 편리하게 접근할 수 있어 높은 Ratings를 보여줍니다. 또한, 컴퓨터 공학을 전공하지는 않았지만 많은 관련업의 종사하시는 분들이 개발 언어로써 사용하고 있고, 그만큼 많은 라이브러리가 있다는점도 장점으로 들 수 있어 1위를 할 수 있는 것 같습니다.미국 정부에서는 C계열언어보다 Rust를 사용하라는 지침이 나오고 있어 Rust의 비중도 50위권 안으로 들어온 점이 인상적 입니다.왜 자바를 사용할까?자바는 C 보다는 늦게 나왔지만 꽤 나 오래된 언어입니다. 그럼에도 현재까지 많은 개발자들이 애용하고 있습니다. 많은 이유가 있겠지만 개인적인 생각을 적어보려고 합니다. 일단 Java가 나온 이유가 상당히 재밌기 때문에 소개하겠습니다.언어의 역사초창기 C 언어는 어셈블리어를 수학적으로 프로그래밍하기 위해 나왔습니다.그리고 JAVA는 C 에서 부족한 부분을 업그레이드 하기 위해 나온 언어입니다.어셈블리어는 실제로 다루어보면 꽤 나 직관적으로 이해할 수 있습니다.section .data    A dd 10       ; A 변수에 10 할당    B dd 20       ; B 변수에 20 할당    C dd 0        ; C 변수 초기화section .textglobal _start_start:    ; A와 B 값을 더하여 C에 저장    mov eax, dword [A]  ; A 변수의 값을 레지스터 eax로 로드    add eax, dword [B]  ; B 변수의 값을 더함    mov dword [C], eax  ; 결과를 C 변수에 저장    ; 프로그램 종료    mov eax, 1          ; 시스템 콜 번호 1 (프로그램 종료)    xor ebx, ebx        ; 종료 코드 0    int 0x80            ; 시스템 콜 호출    흔히 사용하는 고수준 프로그래밍 언어 (자바 , 파이썬등) 만 배워본 사람이라면 엥? 이라는 생각이 듭니다. 하지만 잘 보면 수도 코드를 규칙에 맞게 적어 놨다는 느낌을 받을 수 있습니다.A ,B , C 변수를 선언하고 함수로 저장 하는 과정을 만들어 놓은 것입니다.필자 또한 18학번이기 때문에 굳이? 어셈블리어를 따로 공부해본 경험은 없고 네트워크 수업을 들으며 어떤 식으로 되는지 이해한 정도가 전부입니다.하지만, 이해하기 어려운 이유는 어셈블리어는 저수준 프로그래밍 언어입니다.여기서 수준의 의미는 사람이 더 쉽게 이해할 수 있느냐 즉, 자연어로 이해하기 쉽냐는 의미입니다.메모리 위치나 명령어를 직접 코딩해서 동작 과정을 만들어 내야 하는 일이기 때문에 매우 귀찮지만 천천히 생각해보면 단순히, A를 저장 B를 더함 결과 C에 저장 하는 일을 하고 있습니다.만약 해당 코드를 자바로 코딩하면 어떨까요?public class Main {    public static void main(String[] args) {        int A = 10; // A 변수에 10 할당        int B = 20; // B 변수에 20 할당        int C;      // C 변수 선언        // A와 B를 더하여 C에 저장        C = A + B;        // 결과 출력        System.out.println(\"A + B = \" + C);    }}이렇게나 쉽고 빠르게 이해할 수 있습니다.이것이 수학적 프로그래밍이 필요한 이유라고 생각합니다. 하나하나 글로 설명하는 것보다 수식으로 딱 정리하면 훨씬 간단하니까요C에 대하여컴퓨터가 발명되고 얼마 안된 초창기 개발자들은 기계어 자체를 다루었고 (천공판)이후 개발자들은 어셈블리어로 처리 하였습니다.이때 당시에는 가능했던게 하드웨어의 발전이 아직 부족했기 때문에 큰 메모리를 가지기 어렵고 비쌌기 때문에 지금으로 치면 펌웨어가 동작하는 수준에 코드면 만족스러웠습니다. 즉, 어셈블리어로도 충분히 시간내에 개발이 가능하였습니다.하지만 하드웨어가 발달하고 시장이 커지면서 여러 기능들을 더욱 많이 탑재 해야했고, 어셈블리어로 작업하는 것은 매우 매우 고된 일 이였을 겁니다. (마치 Linux에서 vim 편집기를 쓰는 듯한)그래서 나온게 C 라는 언어입니다.  추상화 수준:          어셈블리어: 어셈블리어는 기계어에 가깝고, 컴퓨터의 하드웨어와 직접적으로 상호작용합니다. 명령어와 레지스터, 메모리 주소 등을 직접 다루기 때문에 하드웨어의 세부 사항을 명확하게 이해해야 합니다.      C: C는 어셈블리어에 비해 더 고수준의 언어입니다. 추상화 수준이 높아서, 개발자가 하드웨어의 세부 사항을 몰라도 프로그래밍할 수 있습니다. 또한, 포인터와 같은 고급 기능을 제공하여 메모리와의 상호작용을 추상화합니다.        가독성 및 이식성:          어셈블리어: 어셈블리어 코드는 기계어에 가까워서 읽기 어렵고 이해하기 어렵습니다. 또한, 어셈블리어 코드는 특정 CPU 아키텍처에 종속적이기 때문에 다른 아키텍처로 이식하기 어렵습니다.      C: C는 읽기 쉽고 이해하기 쉬운 문법을 가지고 있어서 가독성이 뛰어납니다. 또한, C는 플랫폼 독립적이기 때문에 다양한 운영체제와 하드웨어에서 실행될 수 있습니다.        개발 생산성:          어셈블리어: 어셈블리어는 하드웨어의 세부 사항을 직접 다루어야 하므로 개발 생산성이 낮습니다. 또한, 고급 작업을 수행하기 위해서는 많은 코드와 복잡한 로직이 필요합니다.      C: C는 저수준 프로그래밍 언어 중에서는 상당히 높은 개발 생산성을 제공합니다. 고급 작업을 수행하기 위한 라이브러리와 함께 사용되며, 하드웨어와의 상호작용을 추상화하여 개발자가 더 빠르게 프로그램을 작성할 수 있습니다.      정리하면 혁명이 일어났다고 해도 과언이 아닙니다.그럼 자바는 왜 필요한가?  플랫폼의 종속성                  지금은 플랫폼 시장이 많이 정리되었습니다. 큰 회사가 작은회사들을 인수하며 특정 좋은 부분들을 뽑아 자신의 것들과 합쳐 업데이트 했으니까요.        하지만 C 가 나온 시점은 많은 플랫폼들이 춘추 전국시대 처럼 꿈을 안고 도전하고 있었습니다. 하지만 C는 개발했던 플랫폼의 종속되기 때문에 모든 플랫폼에 맞춰 개발해야하는 문제점이 발생하게 됩니다.        예를 들어 윈도우에서 개발한 C 제품은 MAC OS에서는 동작하지 않는 것과 같은 이유입니다.        그래서 자바가 등장한 이유 입니다.        자바는 JVM , JAVA vaulture Machine을 사용합니다. 자바 가상 기계라고 하는데 책을 읽어보면 한세월 걸리지만 간단하게 설명하면 실생활에 있는 하드웨어와 같은 이치입니다.        자바를 위한 , 자바 만을 위한 플랫폼을 가상의 기계에서 만들어 내는 겁니다.              안전성과 보안                  필자는 C언어를 군대를 제대한 후 2학년 때 처음 배웠습니다. 열심히 살아야 된다는 생각때문인지 학점도 열심히 관리하고 공부도 하며 지냈을 때 입니다. 처음 강의를 들을 때는        ‘음 따라갈 만 하네’ 라고 생각하다 포인터라는 놈이 등장하면서 정신이 아늑해졌습니다.        포인터는 말 그대로 가르키는 녀석입니다. 어떤 변수의 값이 저장 되어 있는 메모리의 위치 주소를 가르킨다. 가 핵심인데 문제는 조건도 많고, 포인터 연산이라는 개념 때문에  많은 친구들이 전과를 심각하게 고려하는 시기였기도 합니다.        ### 어려워도 잘 쓰면? 좋은거 아님?        맞습니다. C는 직접 메모리 접근을 허용하기 때문에 수준 높은 개발자가 충분한 이해도를 가지고 개발을 하면 매우 성능 좋은 제품을 개발할 수 있습니다.        다른 이야긴 하지만 슈퍼마리오 개발지를 유튜브에서 본적 있는데 저는 이걸 보고 포인터가 생각이 났습니다.                아주 오래된 게임인 슈퍼마리오를 개발 할 때 매우 적은 메모리에 많은 내용을 담기 위해 개발자들이 고군분투하여 대단한 성능을 구현해 낼 수 있었습니다.        하지만 하드웨어가 매우 빠르게 발전함에 따라 드는 의문이 발생합니다.        “그거 고민할 시간에 좀 더 좋은 사양쓰고 , 코드 한줄 더 적는게 이득아님?”        그래서 JAVA는 포인터와 해당 연산의 개념을 지우고 자동으로 메모리를 관리할 수 있게 하였습니다.        또한, 아주 고급 개발자가 아닌 이상 사람이기 때문에 실수 하고 결국 이는 메모리 누수로 이루어 지기 때문에 JAVA 버전이 올라감에 따라 더욱 이유가 부각되고 있습니다.        즉 정리하면, 하드웨어가 발전함에 따라 예전보다는 치밀한 관리가 필요하지 않기 때문에 기계에게 자동으로 맡겨 두는게 이득이다! 라고 자바 개발자는 생각했던 것 같습니다.              객체 지향 프로그래밍                  자바의 꽃 , 핵심 객체 지향입니다. 약어로 OOP 라고도 부릅니다.        사실 C 도 C++을 쓰거나 지금의 C는 객체 지향적으로 프로그래밍이 충분히 가능합니다.        하지만 자바는 객체 지향적으로  프로그래밍을 할 수 있도록 유도합니다.        가장 대표적으로 자바의 4원칙 (다른 포스팅에서 이야기할 것입니다.)        Class와 객체 입니다.        자바의 모든 것은 객체이고 객체가 아니면 존재할 수 없도록 해놨습니다.        처음 이런 개념을 접했을때 필자는 이렇게 생각했습니다.        “그럼 다른 언어는 왜쓰냐? 업그레이드 버전이있는데?”        그럼 자바는 이전 프로그래밍 방식을 완전히 벗어나 혁명적인 업그레이드 이냐? 아닙니다. 이전 개발 방식은 절차적/구조적 프로그래밍 입니다.        그럼 그게 뭐냐? 개념적으로 설명하려면 한 세월이지만 필자 개인적인 생각으로는        “함.수.써.라”입니다. 왜? 중복코드 관리해야하니까        이것이 절차적/구조적 프로그래밍의 핵심이라고 생각합니다.        그럼 자바는 함수 안쓰냐? 씁니다. 이외에도 정말 많은 개념이 녹아있습니다.        즉, 자바가 강조하는 객체 지향은 기존 방식의 업그레이드 버전입니다.        객체지향에 대한 이야기도 다음 포스트에서 다루고 이런게 있다 정도로 마무리하겠습니다.            다음포스트java가 동작하는 방식에 대해 설명해보겠습니다 !"
  },
  
  {
    "title": "Git 사용법 - 세팅",
    "url": "/posts/Java%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%84%9C%EB%A1%A0/",
    "categories": "Git",
    "tags": "Git, Github, git",
    "date": "2024-01-02 06:44:00 +0900",
    





    
    "snippet": "들어가며이번 포스트 에서는 설정을 할것입니다.레포지토리를 만들어 업로드하는 과정들은 워낙 정보가 많으니 실제로 사용하는 법을 보여드리겠습니다.예를들어 git add -A , git commit -m “first” 이런 코드들을 주는 것은 대체 블로그가 많습니다.저는 이렇게 사용합니다.최근 IDE 가 발달하고 Git을 대부분 지원하기 때문에 딸깍 몇번 ...",
    "content": "들어가며이번 포스트 에서는 설정을 할것입니다.레포지토리를 만들어 업로드하는 과정들은 워낙 정보가 많으니 실제로 사용하는 법을 보여드리겠습니다.예를들어 git add -A , git commit -m “first” 이런 코드들을 주는 것은 대체 블로그가 많습니다.저는 이렇게 사용합니다.최근 IDE 가 발달하고 Git을 대부분 지원하기 때문에 딸깍 몇번 이면 알아서 해줍니다.그래서 굳이? shell명령어를 입력 해야하나? 라고 생각해볼 수도 있습니다.그렇지만 필자는 클라우드 서버환경 예로, AWS ,GCP 에서 서버를 만들고 입력할 때는 알고 있어야 편하게 작업할 수 있어서 공부하였습니다.그래서 로컬말고 클라우드 서버에서 진행해보겠습니다!로컬에서 사용중인(개발자 개인컴퓨터) IDE 와 서버를 연결하는 방법이 다양합니다. 이후에 관련된 포스트를 적어보겠습니다.다음 머릿말 전까지는 GCP 설정에 대한 이야기 입니다.일단 우분투 서버를 하나 준비해보겠습니다.최근에 GCP에 대해 공부하고 있어서 무료 크래딧이 많은 관계로 GCP에서 서버를 하나 가져와보겠습니다.일단 GCP에 들어가서 서버를 하나 무료로 만들어보겠습니다.여러가지 설정을 할 수 있는데  이후에 GCP에 대해 포스트 할때 더 자세히 이야기 해보겠습니다.일단은 우분투로 서버 이미지를 선택해서 하나 만들어보겠습니다.이름을 지정하고 서버 이미지를 선택합니다.실제로 서버에서 사용해보겠습니다.일단 GCP는 브라우저 창에서 SSH로 바로 연결해주는 서비스가 매우 잘되어있어서 클릭후 들어와 보겠습니다. (AWS 도 있습니다.)이런 환경에서는 Git 명령어를 잘 알아야 쓸 수 있겠죠일단 관리자 권한과 업데이트를 진행합니다.sudo su #관리자권한 -&gt; 실제 사용하는 서버는 비밀번호를 설정해둡니다.sudo apt update #업데이트Git 을 다운받아줍니다.apt install git # 인스톨해주고git --version #확인해줍니다.그러면 git 을 연결해 봅시다.먼저 README.md 가 포함된 레포지토리를 하나 작성해줍니다.그다음 https 가 포함된 URL을 복사해줍시다.이제 서버에서 아래처럼 입력하면 됩니다.git clone &lt;레포지토리 주소&gt;잘 들어온 것을 확인할 수 있습니다. 이것을 clone 즉, 복사해오는 방법입니다.전 포스트에서 설명하였는데 , git을 쓰는 목적중 분산저장소 라는 개념이 이런 식으로 사용됩니다.Repository에 아무것도 없는 환경에서 git 사용설정들을 여러가지 해야 하고 , 보통 로컬 환경에서 코딩 및 검수를 끝내고 Demo 정도가 되었을 때 서버에 Setting해서 개인적으로 자주 사용하는 방법은 아닙니다.사실 비용 때문에 최대한 늦게 합니다..zz(서버에 올릴때는 코드가 이미 존재하고 , 개발하면서 서버에 올려두면 서버 비용이 나가서..)하지만 생각보다 어렵지 않습니다. 아래 방법을 설명해보겠습니다.      사용자 정보 설정:Git을 사용하기 위해 사용자 이름과 이메일 주소를 설정해야 합니다. 이 정보는 커밋할 때 사용됩니다.     git config --global user.name \"Your Name\" git config --global user.email \"your_email@example.com\"            Your Name에는 사용자의 실제 이름을, your_email@example.com에는 사용자의 이메일 주소를 넣어주세요.        설정 확인:설정이 올바르게 되었는지 확인하기 위해 설정을 출력할 수 있습니다.     git config --list        이 명령어는 현재 Git의 전역 설정을 모두 보여줍니다.        초기화:Git 저장소를 초기화하려면 해당 디렉토리로 이동한 후 아래 명령어를 실행하세요.     git init        이 명령어는 현재 디렉토리에 새로운 Git 저장소를 만듭니다.  이제 이 명령어들을 사용하여 Git을 설정하고 초기화할 수 있습니다. 설정 후에는 파일을 추적하고 커밋할 수 있습니다. 필요에 따라 Git의 추가적인 설정도 있을 수 있습니다.추가 사항.. 3월 중순에 테스트해본 결과 비밀번호를 지원하지 않습니다.SSH 방법은 추후에 다시 작성 하겠습니다.다음 포스트설정을 완료 하였습니다. 다음 포스트 에서는 개념을 정리해보며 실제 사용법을 익혀보겠습니다."
  },
  
  {
    "title": "Git 사용법 - 서론&설치",
    "url": "/posts/Git%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-%EC%84%9C%EB%A1%A0&%EC%84%A4%EC%B9%98/",
    "categories": "Git",
    "tags": "Git, Github, git",
    "date": "2024-01-01 06:44:00 +0900",
    





    
    "snippet": "들어가며깃 , 깃허브는 개발자가 반드시 알아야 되는 필수 기술 중 하나라고 생각합니다.현재 개발자들이 애용하고 있고, 기업에서도 사용하고 있습니다.또한 , 많은 기능이 있어서 한 사이트 , 기술 스택에서 다양한 활동을 진행할 수 도 있습니다.포스트를 하며 여러 기술들에 대해 공부한 내용을 공유해 보려고 합니다.그래서 Git이 뭔데?Git 이란 버전관리...",
    "content": "들어가며깃 , 깃허브는 개발자가 반드시 알아야 되는 필수 기술 중 하나라고 생각합니다.현재 개발자들이 애용하고 있고, 기업에서도 사용하고 있습니다.또한 , 많은 기능이 있어서 한 사이트 , 기술 스택에서 다양한 활동을 진행할 수 도 있습니다.포스트를 하며 여러 기술들에 대해 공부한 내용을 공유해 보려고 합니다.그래서 Git이 뭔데?Git 이란 버전관리 시스템 (VCS,Version Control System) 중 하나입니다.즉 , 버전을 관리하는 시스템 → 변경사항을 저장하고 , 메시지와함께 기록해둘 수 있습니다.왜 쓸까?여러 이유가 있지만 가장 근본적인 이유는 위 설명한 코드를 기록하는데 있습니다.그 외에도 여러 기능이 있는데 필자가 생각했을 때 가장 핵심적인 요소들로 정리해봤습니다.  분산 시스템: Git은 분산 버전 관리 시스템입니다. 이는 모든 개발자가 로컬 저장소를 가지고 있고, 변경 사항을 서버에 반영하는 대신 로컬에서 변경 사항을 커밋할 수 있다는 것을 의미합니다.  브랜치: Git은 브랜치를 사용하여 개발 작업을 분리하고 병합할 수 있습니다. 이를 통해 여러 개발자가 동시에 작업할 수 있고, 기능을 개발하거나 버그를 수정하는 데 사용할 수 있습니다.  원격 저장소: Git은 원격 저장소를 사용하여 여러 사용자가 함께 작업하고 변경 사항을 공유할 수 있습니다. GitHub, GitLab, Bitbucket 등의 호스팅 서비스를 통해 원격 저장소를 만들고 관리할 수 있습니다.  병합: Git은 브랜치에서 작업한 변경 사항을 다른 브랜치로 병합할 수 있습니다. 이를 통해 여러 개발자가 작업한 변경 사항을 통합하고, 충돌을 해결할 수 있습니다.  추적: Git은 파일의 변경 이력을 추적하고, 누가 언제 어떤 변경 사항을 만들었는지 추적할 수 있습니다. 이를 통해 개발자는 변경 사항을 추적하고 필요한 경우 이전 상태로 돌아갈 수 있습니다.정리하면 로컬 , 원격 저장소에 저장 , 여러 가지로 저장 , 저장된 내용을 병합 추적이렇게 정리해볼 수 있습니다. **더 자세한 개념은 이후 포스트에서 사용할 때 함께 설명하겠습니다.진짜 왜 쓸까?위 내용은 개념적인 내용이고 GIT을 쓰기 시작한 이유를 체득한 이야기입니다.대학교 1학년 시절 진정한 코린이로써 과제를 풀기에도 급급할 때 입니다.수업 전까지 완성해야 제출할 수 있는데 술과 친구들이 너무 좋아 벼락 코딩을 하고 있습니다.열심히 코딩을 하며 한단계 두단계 나아가다 어느 순간 코드가 꼬였습니다.다시 찾으려 애를 쓰지만 마구잡이로 써놓은 코드들 덕분에 어디서 부터 문제인지 찾을 수가 없어..30분동안 돌려보며 찾아보지만 어디서 부터 문제인지 못 찾아 처음부터 다시 코딩을 시작합니다.이때 Git을 알고 있었다면 어땠을까요?커밋된 내용들을 쓱 보며 타임라인에서 제대로 된 코드부터 다시 시작해보거나 , 문제점을 바로 찾을 수 있을 겁니다.이게 제가 GIT을 알게된 후 열심히 사용하고 있는 이유입니다.또한, 팀과 일할 때는 여러 코드들이 꼬이고 병합하는 과정에서 코드끼리 기능상 문제가 생기는 경우도 많습니다. 이럴때는 잘 만들어둔 코드를 살리고 문제가 있는부분을 찾아내 고치는게 훨씬 빠르고, 쉽습니다.어떻게 쓸까?일단 깃을 설치해야 합니다. 설치 방법은 다음과 같습니다.필자는 windows 와 mac 환경에서 개발을 합니다.하지만 서버를 구성하는데는 ubuntu , Linux를 자주 사용하기 때문에 4가지 방법을 제시합니다.Windows:  공식 웹사이트에서 설치하기:          Git의 Windows 용 설치 프로그램은 Git 공식 웹사이트(https://git-scm.com/)에서 다운로드할 수 있습니다.      다운로드 및 설치 프로세스를 따라가면 됩니다.        Chocolatey를 사용하여 설치하기:                  Chocolatey를 설치한 후, 명령 프롬프트나 PowerShell에서 다음 명령어를 실행하여 Git을 설치할 수 있습니다:          Copy code  choco install git                    Linux:  패키지 관리자를 사용하여 설치하기:                  대부분의 Linux 배포판은 패키지 관리자를 통해 Git을 설치할 수 있습니다.                    예를 들어, Ubuntu/Debian에서는 다음 명령어를 사용합니다:          sudo apt update  sudo apt install git                    Ubuntu:  패키지 관리자를 사용하여 설치하기:                  Ubuntu에서도 패키지 관리자를 사용하여 Git을 설치할 수 있습니다.                    터미널에서 다음 명령어를 실행합니다:          sudo apt update  sudo apt install git                    macOS:  Homebrew를 사용하여 설치하기:                  Homebrew를 사용하여 macOS에 Git을 설치할 수 있습니다.                    터미널에서 다음 명령어를 실행합니다:          brew install git                    다음 포스팅설치가 완료되었다면 실제로 사용하는 법을 보여드리며 테스트를 진행해보겠습니다."
  }
  
]

